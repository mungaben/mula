generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                  String              @id @default(auto()) @map("_id") @db.ObjectId
  name                String
  email               String              @unique
  phone               String?             @unique
  password            String
  balance             Float               @default(0.0)
  role                UserRole            @default(USER)
  referralLink        String?             @unique
  referralLinkExpiry  DateTime?
  referredBy          String?             @db.ObjectId
  deposits            Deposit[]
  withdrawals         WithdrawalRequest[]
  products            UserProduct[]
  referrals           Referral[]          @relation("Referrer")
  referred            Referral[]          @relation("Referee")
  promotionRequests   PromotionRequest[]
  notifications       Notification[]
  promotionCodes      PromotionCode[]
  awaitingDeposits    AwaitingDeposit[]
  interests           Interest[]
  commissionsReceived Commission[]        @relation("User_CommissionsReceived")
  commissionsGiven    Commission[]        @relation("User_CommissionsGiven")
  specialCodes        SpecialCode[]
  emailVerified       DateTime?
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  referralLinksUsed   UserReferralLink[]
  unsuccessfulDeposits UnsuccessfulDeposit[]
  unsuccessfulWithdrawals UnsuccessfulWithdrawal[]
}


model LastRun {
  id                      String              @id @default(auto()) @map("_id") @db.ObjectId
  updatedAt               DateTime @default(now()) @updatedAt
  runSource               String
  accountsUpdated         Int
  totalInterestAccumulated Float
  totalBalances           Float
  totalDeposits           Float
  totalWithdrawals        Float
}

model UnsuccessfulDeposit {
  id               String        @id @default(auto()) @map("_id") @db.ObjectId
  userId           String        @db.ObjectId
  amount           Float
  reason           String        // Reason for failure
  createdAt        DateTime      @default(now())
  user             User          @relation(fields: [userId], references: [id])
}

model UnsuccessfulWithdrawal {
  id               String        @id @default(auto()) @map("_id") @db.ObjectId
  userId           String        @db.ObjectId
  amount           Float
  reason           String        // Reason for failure
  createdAt        DateTime      @default(now())
  user             User          @relation(fields: [userId], references: [id])
}

model Referral {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  referrerId     String   @db.ObjectId
  refereeId      String?  @db.ObjectId  // This should be optional as it will be set later
  level          Int      // Referral level (1, 2, or 3)
  percentage     Float    // Commission percentage for this level
  linkLifetime   DateTime // Expiration date for the referral link
  createdAt      DateTime @default(now())
  referrer       User     @relation("Referrer", fields: [referrerId], references: [id])
  referee        User?    @relation("Referee", fields: [refereeId], references: [id])
}

model UserReferralLink {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  userId         String   @db.ObjectId
  referralLink   String
  usedAt         DateTime @default(now())
  user           User     @relation(fields: [userId], references: [id])
}

model Config {
  id                      String  @id @default(auto()) @map("_id") @db.ObjectId
  minWithdrawalAmount     Float
  withdrawalFeePercentage Float
  minBalance              Float
  level1Percentage        Float
  level2Percentage        Float
  level3Percentage        Float
  initialBal              Float? @default(100)
  linkLifetime            Int // in days
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
}

model SimPhoneNumber {
  id               String            @id @default(auto()) @map("_id") @db.ObjectId
  phoneNumber      String            @unique
  description      String
  createdAt        DateTime          @default(now())
}

model Deposit {
  id               String         @id @default(auto()) @map("_id") @db.ObjectId
  userId           String         @db.ObjectId
  amount           Float
  createdAt        DateTime       @default(now())
  user             User           @relation(fields: [userId], references: [id])
  status           DepositStatus  @default(PENDING)
}

model WithdrawalRequest {
  id               String           @id @default(auto()) @map("_id") @db.ObjectId
  userId           String           @db.ObjectId
  amount           Float
  status           WithdrawalStatus @default(REQUESTED)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  user             User             @relation(fields: [userId], references: [id])
 
}

model Product {
  id                String        @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  price             Float
  DaysToExpire      Int?
  earningPer24Hours Float
  growthPercentage  Float // Added to store growth percentage
  subscribersCount  Int           @default(0)
  userProducts      UserProduct[]
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @default(now()) @updatedAt
}

model UserProduct {
  id              String     @id @default(auto()) @map("_id") @db.ObjectId
  userId          String     @db.ObjectId
  productId       String     @db.ObjectId
  createdAt       DateTime   @default(now())
  daysRemaining   Int?       // Allow null values
  interestAccrued Float      @default(0.0)
  user            User       @relation(fields: [userId], references: [id])
  product         Product    @relation(fields: [productId], references: [id])
  interests       Interest[]
}

model PromotionCode {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  code      String   @unique
  price     Float
  userId    String?  @db.ObjectId
  createdAt DateTime @default(now())
  expiresAt DateTime
  user      User?    @relation(fields: [userId], references: [id])
}

model Notification {
  id        String           @id @default(auto()) @map("_id") @db.ObjectId
  userId    String           @db.ObjectId
  type      NotificationType
  message   String
  createdAt DateTime         @default(now())
  user      User             @relation(fields: [userId], references: [id])
}

model Interest {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  userId        String      @db.ObjectId
  userProductId String      @db.ObjectId
  amount        Float
  createdAt     DateTime    @default(now())
  user          User        @relation(fields: [userId], references: [id])
  userProduct   UserProduct @relation(fields: [userProductId], references: [id])
}

model Commission {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @db.ObjectId
  referrerId String   @db.ObjectId
  amount     Float
  level      Int      // Referral level (1, 2, or 3)
  pending    Boolean  @default(true) // Indicates if the commission is pending
  createdAt  DateTime @default(now())
  user       User     @relation("User_CommissionsReceived", fields: [userId], references: [id])
  referrer   User     @relation("User_CommissionsGiven", fields: [referrerId], references: [id])
}

model SpecialCode {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  code          String   @unique
  totalAmount   Float // Total redeemable amount
  redeemAmount  Float // Amount each user gets
  currentAmount Float    @default(0.0) // Track how much has been redeemed
  userId        String?  @db.ObjectId
  createdAt     DateTime @default(now())
  expiresAt     DateTime
  user          User?    @relation(fields: [userId], references: [id])
}

model PromotionRequest {
  id             String     @id @default(auto()) @map("_id") @db.ObjectId
  userId         String     @db.ObjectId
  status         String     @default("PENDING") // PENDING, APPROVED, REJECTED
  roleRequested  UserRole
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  user           User       @relation(fields: [userId], references: [id])
}

model AwaitingDeposit {
  id               String      @id @default(auto()) @map("_id") @db.ObjectId
  userId           String      @db.ObjectId
  amount           Float
  initiatedAt      DateTime    @default(now())
  status           DepositStatus @default(PENDING)
  user             User        @relation(fields: [userId], references: [id])
}

enum DepositStatus {
  PENDING
  FULFILLED
  EXPIRED
  NOT_PREINITIATED_FULFILLED
}

enum UserRole {
  USER
  SUBADMIN
  ADMIN
}

enum WithdrawalStatus {
  REQUESTED
  APPROVED
  REJECTED
}

enum PurchaseStatus {
  PURCHASED
  NOT_PURCHASED
}

enum NotificationType {
  DEPOSIT
  WITHDRAWAL
  PURCHASE
  LOGIN
}
